// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230419204803_UpdateDb")]
    partial class UpdateDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ChallengeUser", b =>
                {
                    b.Property<int>("ChallengesId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChallengesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ChallengeUser");
                });

            modelBuilder.Entity("Core.Entities.Challenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ChallengeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountOfUnits")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("VisibilityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UnitId");

                    b.HasIndex("VisibilityId");

                    b.ToTable("Challenges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChallengeTypeId = 1,
                            Color = "#8CEF73",
                            CountOfUnits = 500,
                            CreatedById = "317019c7-affb-4721-b088-03c0edb892fd",
                            Description = "Water is vital for healthy life. So, I need to drink it enough!",
                            EndDate = new DateTimeOffset(new DateTime(2023, 5, 10, 23, 48, 2, 45, DateTimeKind.Unspecified).AddTicks(3761), new TimeSpan(0, 3, 0, 0, 0)),
                            Frequency = "1111100",
                            IconName = "mdiWaterCheck",
                            IsCompleted = false,
                            StartDate = new DateTimeOffset(new DateTime(2023, 4, 19, 23, 48, 2, 45, DateTimeKind.Unspecified).AddTicks(2413), new TimeSpan(0, 3, 0, 0, 0)),
                            Title = "Drink Water",
                            UnitId = 5,
                            VisibilityId = 1
                        },
                        new
                        {
                            Id = 2,
                            ChallengeTypeId = 1,
                            Color = "#8CEF73",
                            CountOfUnits = 500,
                            CreatedById = "d040ca2a-d137-4723-804a-d54c8060c121",
                            Description = "Water is vital for healthy life. So, I need to drink it enough!",
                            EndDate = new DateTimeOffset(new DateTime(2023, 5, 10, 23, 48, 2, 45, DateTimeKind.Unspecified).AddTicks(4721), new TimeSpan(0, 3, 0, 0, 0)),
                            Frequency = "1111100",
                            IconName = "mdiWaterCheck",
                            IsCompleted = false,
                            StartDate = new DateTimeOffset(new DateTime(2023, 4, 19, 23, 48, 2, 45, DateTimeKind.Unspecified).AddTicks(4703), new TimeSpan(0, 3, 0, 0, 0)),
                            Title = "Drink Water",
                            UnitId = 5,
                            VisibilityId = 1
                        },
                        new
                        {
                            Id = 3,
                            ChallengeTypeId = 1,
                            Color = "#FEFA95",
                            CountOfUnits = 15,
                            CreatedById = "317019c7-affb-4721-b088-03c0edb892fd",
                            Description = "",
                            EndDate = new DateTimeOffset(new DateTime(2023, 5, 10, 23, 48, 2, 45, DateTimeKind.Unspecified).AddTicks(4741), new TimeSpan(0, 3, 0, 0, 0)),
                            Frequency = "1101100",
                            IconName = "mdiRunFast",
                            IsCompleted = false,
                            StartDate = new DateTimeOffset(new DateTime(2023, 4, 19, 23, 48, 2, 45, DateTimeKind.Unspecified).AddTicks(4738), new TimeSpan(0, 3, 0, 0, 0)),
                            Title = "Run",
                            UnitId = 2,
                            VisibilityId = 1
                        },
                        new
                        {
                            Id = 4,
                            ChallengeTypeId = 1,
                            Color = "#FEFA95",
                            CountOfUnits = 15,
                            CreatedById = "d040ca2a-d137-4723-804a-d54c8060c121",
                            Description = "",
                            EndDate = new DateTimeOffset(new DateTime(2023, 5, 10, 23, 48, 2, 45, DateTimeKind.Unspecified).AddTicks(4750), new TimeSpan(0, 3, 0, 0, 0)),
                            Frequency = "1101100",
                            IconName = "mdiRunFast",
                            IsCompleted = false,
                            StartDate = new DateTimeOffset(new DateTime(2023, 4, 19, 23, 48, 2, 45, DateTimeKind.Unspecified).AddTicks(4747), new TimeSpan(0, 3, 0, 0, 0)),
                            Title = "Run",
                            UnitId = 2,
                            VisibilityId = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.ChallengeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChallengeTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Build a habit"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Quit a habit"
                        });
                });

            modelBuilder.Entity("Core.Entities.DailyTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<int>("CountOfUnitsDone")
                        .HasColumnType("int");

                    b.Property<bool>("IsDone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("SubtaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("SubtaskId");

                    b.ToTable("DailyTasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignedDate = new DateTime(2023, 4, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 2,
                            AssignedDate = new DateTime(2023, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 3,
                            AssignedDate = new DateTime(2023, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 4,
                            AssignedDate = new DateTime(2023, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 5,
                            AssignedDate = new DateTime(2023, 4, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 6,
                            AssignedDate = new DateTime(2023, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 7,
                            AssignedDate = new DateTime(2023, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 8,
                            AssignedDate = new DateTime(2023, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 9,
                            AssignedDate = new DateTime(2023, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 10,
                            AssignedDate = new DateTime(2023, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 11,
                            AssignedDate = new DateTime(2023, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 12,
                            AssignedDate = new DateTime(2023, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 13,
                            AssignedDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 14,
                            AssignedDate = new DateTime(2023, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 15,
                            AssignedDate = new DateTime(2023, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 16,
                            AssignedDate = new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 17,
                            AssignedDate = new DateTime(2023, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 18,
                            AssignedDate = new DateTime(2023, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 19,
                            AssignedDate = new DateTime(2023, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 20,
                            AssignedDate = new DateTime(2023, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 21,
                            AssignedDate = new DateTime(2023, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 22,
                            AssignedDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 23,
                            AssignedDate = new DateTime(2023, 4, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 24,
                            AssignedDate = new DateTime(2023, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 25,
                            AssignedDate = new DateTime(2023, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 26,
                            AssignedDate = new DateTime(2023, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 27,
                            AssignedDate = new DateTime(2023, 4, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 28,
                            AssignedDate = new DateTime(2023, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 29,
                            AssignedDate = new DateTime(2023, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 30,
                            AssignedDate = new DateTime(2023, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 31,
                            AssignedDate = new DateTime(2023, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 32,
                            AssignedDate = new DateTime(2023, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 33,
                            AssignedDate = new DateTime(2023, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 34,
                            AssignedDate = new DateTime(2023, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 35,
                            AssignedDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 36,
                            AssignedDate = new DateTime(2023, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 37,
                            AssignedDate = new DateTime(2023, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 38,
                            AssignedDate = new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 39,
                            AssignedDate = new DateTime(2023, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 40,
                            AssignedDate = new DateTime(2023, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 41,
                            AssignedDate = new DateTime(2023, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 42,
                            AssignedDate = new DateTime(2023, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 43,
                            AssignedDate = new DateTime(2023, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 44,
                            AssignedDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 45,
                            AssignedDate = new DateTime(2023, 4, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 46,
                            AssignedDate = new DateTime(2023, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 47,
                            AssignedDate = new DateTime(2023, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 48,
                            AssignedDate = new DateTime(2023, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 49,
                            AssignedDate = new DateTime(2023, 4, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 50,
                            AssignedDate = new DateTime(2023, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 51,
                            AssignedDate = new DateTime(2023, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 52,
                            AssignedDate = new DateTime(2023, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 53,
                            AssignedDate = new DateTime(2023, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 54,
                            AssignedDate = new DateTime(2023, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 55,
                            AssignedDate = new DateTime(2023, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 56,
                            AssignedDate = new DateTime(2023, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 57,
                            AssignedDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 58,
                            AssignedDate = new DateTime(2023, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 59,
                            AssignedDate = new DateTime(2023, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 60,
                            AssignedDate = new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 61,
                            AssignedDate = new DateTime(2023, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 62,
                            AssignedDate = new DateTime(2023, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 63,
                            AssignedDate = new DateTime(2023, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 64,
                            AssignedDate = new DateTime(2023, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 65,
                            AssignedDate = new DateTime(2023, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 66,
                            AssignedDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 67,
                            AssignedDate = new DateTime(2023, 4, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 68,
                            AssignedDate = new DateTime(2023, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 69,
                            AssignedDate = new DateTime(2023, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 70,
                            AssignedDate = new DateTime(2023, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 71,
                            AssignedDate = new DateTime(2023, 4, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 72,
                            AssignedDate = new DateTime(2023, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 73,
                            AssignedDate = new DateTime(2023, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 74,
                            AssignedDate = new DateTime(2023, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 75,
                            AssignedDate = new DateTime(2023, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 76,
                            AssignedDate = new DateTime(2023, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 77,
                            AssignedDate = new DateTime(2023, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 78,
                            AssignedDate = new DateTime(2023, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 79,
                            AssignedDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 80,
                            AssignedDate = new DateTime(2023, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 81,
                            AssignedDate = new DateTime(2023, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 82,
                            AssignedDate = new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 83,
                            AssignedDate = new DateTime(2023, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 84,
                            AssignedDate = new DateTime(2023, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 85,
                            AssignedDate = new DateTime(2023, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 86,
                            AssignedDate = new DateTime(2023, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 87,
                            AssignedDate = new DateTime(2023, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 88,
                            AssignedDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        });
                });

            modelBuilder.Entity("Core.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Core.Entities.Subtask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<int>("CountOfUnits")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("UnitId");

                    b.ToTable("Subtasks");
                });

            modelBuilder.Entity("Core.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ShortType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ShortType = "times",
                            Type = "times"
                        },
                        new
                        {
                            Id = 2,
                            ShortType = "min",
                            Type = "minutes"
                        },
                        new
                        {
                            Id = 3,
                            ShortType = "m",
                            Type = "meters"
                        },
                        new
                        {
                            Id = 4,
                            ShortType = "km",
                            Type = "kilometers"
                        },
                        new
                        {
                            Id = 5,
                            ShortType = "ml",
                            Type = "milliliters"
                        },
                        new
                        {
                            Id = 6,
                            ShortType = "pages",
                            Type = "pages"
                        });
                });

            modelBuilder.Entity("Core.Entities.Visibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Visibilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Only me"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Friends"
                        },
                        new
                        {
                            Id = 3,
                            Type = "All users"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "d040ca2a-d137-4723-804a-d54c8060c121",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a8dc252-8c31-4034-817e-16db3b94d789",
                            Email = "anna.korolchuk@oa.edu.ua",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNA.KOROLCHUK@OA.EDU.UA",
                            NormalizedUserName = "ANNA.KOROLCHUK@OA.EDU.UA",
                            PasswordHash = "AQAAAAEAACcQAAAAEKb2Jil+6y1969odLMwfvrUmXRiU5AfACQs3XN+2ezCtsMKDOf3YC3GoCegbLNk+AA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7ee67958-8593-4b17-8f53-788ab83b51bf",
                            TwoFactorEnabled = false,
                            UserName = "a_korolchuk",
                            Points = 0
                        },
                        new
                        {
                            Id = "317019c7-affb-4721-b088-03c0edb892fd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "55b792a2-2d80-41bc-b530-9b3e3800e03e",
                            Email = "antonina.loboda@oa.edu.ua",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANTONINA.LOBODA@OA.EDU.UA",
                            NormalizedUserName = "ANTONINA.LOBODA@OA.EDU.UA",
                            PasswordHash = "AQAAAAEAACcQAAAAEFuNG7m0dz7bSCXcQoxiCIBEggbTWrOVWrJ3EQvZ0kMdgQIeg3vZyhpPx/tGqKJttQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "55368574-ab92-4e40-863a-ec7e59aae95f",
                            TwoFactorEnabled = false,
                            UserName = "ton4ik",
                            Points = 0
                        },
                        new
                        {
                            Id = "2d63186a-b5fc-4080-a630-f37b5b84ee54",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9464e34d-8b4d-4ed9-8f98-76a626bce933",
                            Email = "Tomas.Parker@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TOMAS.PARKER@GMAIL.COM",
                            NormalizedUserName = "TOMAS.PARKER",
                            PasswordHash = "AQAAAAEAACcQAAAAECVfyTky5/PTaSRaStKR4e9qd+jLlVTIOdUr5B5SVBITvVZvknSEnILRZ/hCfiSEuw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b696c1de-c2ad-48f6-be64-46bf3250d4a2",
                            TwoFactorEnabled = false,
                            UserName = "Tomas.Parker",
                            Points = 0
                        },
                        new
                        {
                            Id = "af2eb052-90b7-4e48-b363-3da0bedfb9c8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fb02b8fe-dd5d-44da-a90e-e6203c562bae",
                            Email = "Clayton_Ward11@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLAYTON_WARD11@GMAIL.COM",
                            NormalizedUserName = "CLAYTON.WARD94",
                            PasswordHash = "AQAAAAEAACcQAAAAECQtboG+SvZIhp4iRQNzAN+RtjoZUDW8pftjhvu00oGJqVSb18KC8ku8iYmX5oqZ+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d19bbc76-11f9-465b-9b83-fe6dfa51c866",
                            TwoFactorEnabled = false,
                            UserName = "Clayton.Ward94",
                            Points = 0
                        },
                        new
                        {
                            Id = "aca9c1c8-960e-468d-8de8-3dc9f35fb3f8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b316969-bc05-4989-9288-300b77ead96b",
                            Email = "Jacob_Mitchell42@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JACOB_MITCHELL42@GMAIL.COM",
                            NormalizedUserName = "JACOB4",
                            PasswordHash = "AQAAAAEAACcQAAAAENUHP56sbPmLCGe5qvHwiibtCF0vP7mESLjcm9GR6hYlA2lhla2fs2nQkpSB7kTnrg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "565b7c29-4fc6-4f44-b1e3-5d73730970bf",
                            TwoFactorEnabled = false,
                            UserName = "Jacob4",
                            Points = 0
                        },
                        new
                        {
                            Id = "98f58c84-c7d7-4852-ba2d-925fdb31ffc1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2140e97b-2422-458a-8fca-133cd14d7ed3",
                            Email = "Kim96@hotmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KIM96@HOTMAIL.COM",
                            NormalizedUserName = "KIM33",
                            PasswordHash = "AQAAAAEAACcQAAAAEEE4OTbjcZ0Xmz3tycjtGWMsjIHRxAFwaWhDR7/1ikq40GJwtcSpVM5mh1TtRMvsOw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "32b186dc-7e58-474e-a0cc-bcb324d41c57",
                            TwoFactorEnabled = false,
                            UserName = "Kim33",
                            Points = 0
                        });
                });

            modelBuilder.Entity("ChallengeUser", b =>
                {
                    b.HasOne("Core.Entities.Challenge", null)
                        .WithMany()
                        .HasForeignKey("ChallengesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Challenge", b =>
                {
                    b.HasOne("Core.Entities.ChallengeType", "ChallengeType")
                        .WithMany("Challenges")
                        .HasForeignKey("ChallengeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "CreatedBy")
                        .WithMany("AuthoredChallenges")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Unit", "Unit")
                        .WithMany("Challenges")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Visibility", "Visibility")
                        .WithMany("Challenges")
                        .HasForeignKey("VisibilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChallengeType");

                    b.Navigation("CreatedBy");

                    b.Navigation("Unit");

                    b.Navigation("Visibility");
                });

            modelBuilder.Entity("Core.Entities.DailyTask", b =>
                {
                    b.HasOne("Core.Entities.Challenge", "Challenge")
                        .WithMany("DailyTasks")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Subtask", "Subtask")
                        .WithMany("DailyTasks")
                        .HasForeignKey("SubtaskId");

                    b.Navigation("Challenge");

                    b.Navigation("Subtask");
                });

            modelBuilder.Entity("Core.Entities.RefreshToken", b =>
                {
                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Subtask", b =>
                {
                    b.HasOne("Core.Entities.Challenge", "Challenge")
                        .WithMany("Subtasks")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Unit", "Unit")
                        .WithMany("Subtasks")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Challenge", b =>
                {
                    b.Navigation("DailyTasks");

                    b.Navigation("Subtasks");
                });

            modelBuilder.Entity("Core.Entities.ChallengeType", b =>
                {
                    b.Navigation("Challenges");
                });

            modelBuilder.Entity("Core.Entities.Subtask", b =>
                {
                    b.Navigation("DailyTasks");
                });

            modelBuilder.Entity("Core.Entities.Unit", b =>
                {
                    b.Navigation("Challenges");

                    b.Navigation("Subtasks");
                });

            modelBuilder.Entity("Core.Entities.Visibility", b =>
                {
                    b.Navigation("Challenges");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Navigation("AuthoredChallenges");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
