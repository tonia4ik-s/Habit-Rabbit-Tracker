// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Entities.Challenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ChallengeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountOfUnits")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("VisibilityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UnitId");

                    b.HasIndex("VisibilityId");

                    b.ToTable("Challenges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChallengeTypeId = 1,
                            Color = "#8CEF73",
                            CountOfUnits = 500,
                            CreatedById = "9b772948-ec50-4259-a288-89846eed26d2",
                            Description = "Water is vital for healthy life. So, I need to drink it enough!",
                            EndDate = new DateTimeOffset(new DateTime(2023, 7, 9, 17, 27, 1, 525, DateTimeKind.Unspecified).AddTicks(7621), new TimeSpan(0, 3, 0, 0, 0)),
                            Frequency = "1111100",
                            IconName = "mdiWaterCheck",
                            IsCompleted = false,
                            StartDate = new DateTimeOffset(new DateTime(2023, 6, 18, 17, 27, 1, 525, DateTimeKind.Unspecified).AddTicks(6161), new TimeSpan(0, 3, 0, 0, 0)),
                            Title = "Drink Water",
                            UnitId = 5,
                            VisibilityId = 1
                        },
                        new
                        {
                            Id = 2,
                            ChallengeTypeId = 1,
                            Color = "#8CEF73",
                            CountOfUnits = 500,
                            CreatedById = "2d4cf49d-0337-4d22-b6f3-99c4f4c84154",
                            Description = "Water is vital for healthy life. So, I need to drink it enough!",
                            EndDate = new DateTimeOffset(new DateTime(2023, 7, 9, 17, 27, 1, 525, DateTimeKind.Unspecified).AddTicks(8575), new TimeSpan(0, 3, 0, 0, 0)),
                            Frequency = "1111100",
                            IconName = "mdiWaterCheck",
                            IsCompleted = false,
                            StartDate = new DateTimeOffset(new DateTime(2023, 6, 18, 17, 27, 1, 525, DateTimeKind.Unspecified).AddTicks(8556), new TimeSpan(0, 3, 0, 0, 0)),
                            Title = "Drink Water",
                            UnitId = 5,
                            VisibilityId = 1
                        },
                        new
                        {
                            Id = 3,
                            ChallengeTypeId = 1,
                            Color = "#FEFA95",
                            CountOfUnits = 15,
                            CreatedById = "9b772948-ec50-4259-a288-89846eed26d2",
                            Description = "",
                            EndDate = new DateTimeOffset(new DateTime(2023, 7, 9, 17, 27, 1, 525, DateTimeKind.Unspecified).AddTicks(8595), new TimeSpan(0, 3, 0, 0, 0)),
                            Frequency = "1101100",
                            IconName = "mdiRunFast",
                            IsCompleted = false,
                            StartDate = new DateTimeOffset(new DateTime(2023, 6, 18, 17, 27, 1, 525, DateTimeKind.Unspecified).AddTicks(8592), new TimeSpan(0, 3, 0, 0, 0)),
                            Title = "Run",
                            UnitId = 2,
                            VisibilityId = 1
                        },
                        new
                        {
                            Id = 4,
                            ChallengeTypeId = 1,
                            Color = "#FEFA95",
                            CountOfUnits = 15,
                            CreatedById = "2d4cf49d-0337-4d22-b6f3-99c4f4c84154",
                            Description = "",
                            EndDate = new DateTimeOffset(new DateTime(2023, 7, 9, 17, 27, 1, 525, DateTimeKind.Unspecified).AddTicks(8603), new TimeSpan(0, 3, 0, 0, 0)),
                            Frequency = "1101100",
                            IconName = "mdiRunFast",
                            IsCompleted = false,
                            StartDate = new DateTimeOffset(new DateTime(2023, 6, 18, 17, 27, 1, 525, DateTimeKind.Unspecified).AddTicks(8600), new TimeSpan(0, 3, 0, 0, 0)),
                            Title = "Run",
                            UnitId = 2,
                            VisibilityId = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.ChallengeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChallengeTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Build a habit"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Quit a habit"
                        });
                });

            modelBuilder.Entity("Core.Entities.DailyTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("AssignedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<int>("CountOfUnitsDone")
                        .HasColumnType("int");

                    b.Property<bool>("IsDone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("SubtaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("SubtaskId");

                    b.ToTable("DailyTasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 2,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 3,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 4,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 5,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 6,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 7,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 8,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 9,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 10,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 29, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 11,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 12,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 13,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 7, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 14,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 15,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 16,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 17,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 18,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 19,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 20,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 21,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 22,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 23,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 24,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 25,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 26,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 29, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 27,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 28,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 29,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 7, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 30,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 31,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 32,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 33,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 34,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 35,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 36,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 37,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 38,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 39,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 40,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 29, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 41,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 42,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 43,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 44,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 45,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 46,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 47,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 48,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 49,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 50,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 51,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 52,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 53,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 6, 29, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 54,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 55,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 56,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 57,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 58,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        });
                });

            modelBuilder.Entity("Core.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Core.Entities.Subtask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<int>("CountOfUnits")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("UnitId");

                    b.ToTable("Subtasks");
                });

            modelBuilder.Entity("Core.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ShortType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ShortType = "times",
                            Type = "times"
                        },
                        new
                        {
                            Id = 2,
                            ShortType = "min",
                            Type = "minutes"
                        },
                        new
                        {
                            Id = 3,
                            ShortType = "m",
                            Type = "meters"
                        },
                        new
                        {
                            Id = 4,
                            ShortType = "km",
                            Type = "kilometers"
                        },
                        new
                        {
                            Id = 5,
                            ShortType = "ml",
                            Type = "milliliters"
                        },
                        new
                        {
                            Id = 6,
                            ShortType = "pages",
                            Type = "pages"
                        });
                });

            modelBuilder.Entity("Core.Entities.Visibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Visibilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Only me"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Friends"
                        },
                        new
                        {
                            Id = 3,
                            Type = "All users"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "2d4cf49d-0337-4d22-b6f3-99c4f4c84154",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "608e40a1-67b1-45ac-8955-d9244c57b64d",
                            Email = "anna.korolchuk@oa.edu.ua",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNA.KOROLCHUK@OA.EDU.UA",
                            NormalizedUserName = "ANNA.KOROLCHUK@OA.EDU.UA",
                            PasswordHash = "AQAAAAEAACcQAAAAEI7RYDhfyOD8R4Qr/gCYiVdBJkkM/nDOIKgE4hqd0osAhcVH6ZerryptJqi9kGzspQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51d8bd7f-7fce-4f89-9c74-e2f9af5b56c2",
                            TwoFactorEnabled = false,
                            UserName = "a_korolchuk",
                            Points = 0,
                            Status = 0
                        },
                        new
                        {
                            Id = "9b772948-ec50-4259-a288-89846eed26d2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f4a9343b-1634-451a-bf2e-198da22118cf",
                            Email = "antonina.loboda@oa.edu.ua",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANTONINA.LOBODA@OA.EDU.UA",
                            NormalizedUserName = "ANTONINA.LOBODA@OA.EDU.UA",
                            PasswordHash = "AQAAAAEAACcQAAAAEM+0uV20KfnV8WyPj4UELBnXe2M0Fs+B1mG5zSrrLLRWNcerEhywwV44LctyfdxmWQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f71130d9-f0c4-4875-ab39-7d62b2bd7e02",
                            TwoFactorEnabled = false,
                            UserName = "ton4ik",
                            Points = 0,
                            Status = 0
                        },
                        new
                        {
                            Id = "0b843f0e-f1f1-4943-90d5-a4c093f24a24",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9611f81f-394c-4b16-a4d8-0ab498b93e19",
                            Email = "Erik4@yahoo.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ERIK4@YAHOO.COM",
                            NormalizedUserName = "ERIK_HETTINGER62",
                            PasswordHash = "AQAAAAEAACcQAAAAEK8Tbpp8fuoDuG9D+8DYlQTFzg0tKhFkGO2M9xVkANS2ZZneJO33WSQo+LK2rmxNGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3054516d-2e88-422c-bc08-99480990cf92",
                            TwoFactorEnabled = false,
                            UserName = "Erik_Hettinger62",
                            Points = 0,
                            Status = 0
                        },
                        new
                        {
                            Id = "c2956c48-973d-4915-a739-0df7533e7261",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd2e2b3e-05c4-452e-9d5c-1f5e69ba8415",
                            Email = "Ollie_Beier@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "OLLIE_BEIER@GMAIL.COM",
                            NormalizedUserName = "OLLIE_BEIER",
                            PasswordHash = "AQAAAAEAACcQAAAAEBUyLuPQmEYCvLIAD6pqFva/91VdY0TxJxU3/e30SoH/8bIrenP8qNOkxg4ei/WqWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4efa82ff-9881-40ee-bd4d-a9bb209d095f",
                            TwoFactorEnabled = false,
                            UserName = "Ollie_Beier",
                            Points = 0,
                            Status = 0
                        },
                        new
                        {
                            Id = "925c1878-68c0-4fca-98f0-f33f728db1fa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0eb667c0-85d0-4b5e-bcc8-90448743b18f",
                            Email = "Randall.Spencer@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RANDALL.SPENCER@GMAIL.COM",
                            NormalizedUserName = "RANDALL_SPENCER53",
                            PasswordHash = "AQAAAAEAACcQAAAAEAbbX9AAOn1nNraZWtcR2MTRyJoUITyNqC70EyHUuNWgAa67/kFlHQB0ySp2yqsbfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "61c485a8-b132-473d-b66b-b951662c275f",
                            TwoFactorEnabled = false,
                            UserName = "Randall_Spencer53",
                            Points = 0,
                            Status = 0
                        },
                        new
                        {
                            Id = "d4e75c26-b3fc-4e10-a4b2-af69533a9152",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "25f5aafd-b205-4c70-9681-144c451090cd",
                            Email = "Kendra.Herzog@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KENDRA.HERZOG@GMAIL.COM",
                            NormalizedUserName = "KENDRA41",
                            PasswordHash = "AQAAAAEAACcQAAAAEFEN4KPWx6qlfBWhq8J9duLwsZ8cvNhPRwASKWQ0W2zHKrF4c9DG7f1X39UnPYF4tQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f56905c4-08e2-46e7-9aa0-7b8d1f425048",
                            TwoFactorEnabled = false,
                            UserName = "Kendra41",
                            Points = 0,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Core.Entities.Challenge", b =>
                {
                    b.HasOne("Core.Entities.ChallengeType", "ChallengeType")
                        .WithMany("Challenges")
                        .HasForeignKey("ChallengeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "CreatedBy")
                        .WithMany("AuthoredChallenges")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Unit", "Unit")
                        .WithMany("Challenges")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Visibility", "Visibility")
                        .WithMany("Challenges")
                        .HasForeignKey("VisibilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChallengeType");

                    b.Navigation("CreatedBy");

                    b.Navigation("Unit");

                    b.Navigation("Visibility");
                });

            modelBuilder.Entity("Core.Entities.DailyTask", b =>
                {
                    b.HasOne("Core.Entities.Challenge", "Challenge")
                        .WithMany("DailyTasks")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Subtask", "Subtask")
                        .WithMany("DailyTasks")
                        .HasForeignKey("SubtaskId");

                    b.Navigation("Challenge");

                    b.Navigation("Subtask");
                });

            modelBuilder.Entity("Core.Entities.RefreshToken", b =>
                {
                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Subtask", b =>
                {
                    b.HasOne("Core.Entities.Challenge", "Challenge")
                        .WithMany("Subtasks")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Unit", "Unit")
                        .WithMany("Subtasks")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Challenge", b =>
                {
                    b.Navigation("DailyTasks");

                    b.Navigation("Subtasks");
                });

            modelBuilder.Entity("Core.Entities.ChallengeType", b =>
                {
                    b.Navigation("Challenges");
                });

            modelBuilder.Entity("Core.Entities.Subtask", b =>
                {
                    b.Navigation("DailyTasks");
                });

            modelBuilder.Entity("Core.Entities.Unit", b =>
                {
                    b.Navigation("Challenges");

                    b.Navigation("Subtasks");
                });

            modelBuilder.Entity("Core.Entities.Visibility", b =>
                {
                    b.Navigation("Challenges");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Navigation("AuthoredChallenges");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
