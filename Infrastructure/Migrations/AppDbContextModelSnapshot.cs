// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ChallengeUser", b =>
                {
                    b.Property<int>("ChallengesId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChallengesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ChallengeUser");
                });

            modelBuilder.Entity("Core.Entities.Challenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ChallengeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountOfUnits")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("VisibilityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UnitId");

                    b.HasIndex("VisibilityId");

                    b.ToTable("Challenges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChallengeTypeId = 1,
                            Color = "#8CEF73",
                            CountOfUnits = 500,
                            CreatedById = "81a2a998-6922-4cd9-ba36-b449a34a766a",
                            Description = "Water is vital for healthy life. So, I need to drink it enough!",
                            EndDate = new DateTimeOffset(new DateTime(2023, 5, 23, 18, 22, 10, 745, DateTimeKind.Unspecified).AddTicks(2277), new TimeSpan(0, 3, 0, 0, 0)),
                            Frequency = "1111100",
                            IconName = "mdiWaterCheck",
                            IsCompleted = false,
                            StartDate = new DateTimeOffset(new DateTime(2023, 5, 2, 18, 22, 10, 745, DateTimeKind.Unspecified).AddTicks(239), new TimeSpan(0, 3, 0, 0, 0)),
                            Title = "Drink Water",
                            UnitId = 5,
                            VisibilityId = 1
                        },
                        new
                        {
                            Id = 2,
                            ChallengeTypeId = 1,
                            Color = "#8CEF73",
                            CountOfUnits = 500,
                            CreatedById = "8526c845-e7be-4844-adbd-d512656409cc",
                            Description = "Water is vital for healthy life. So, I need to drink it enough!",
                            EndDate = new DateTimeOffset(new DateTime(2023, 5, 23, 18, 22, 10, 745, DateTimeKind.Unspecified).AddTicks(3689), new TimeSpan(0, 3, 0, 0, 0)),
                            Frequency = "1111100",
                            IconName = "mdiWaterCheck",
                            IsCompleted = false,
                            StartDate = new DateTimeOffset(new DateTime(2023, 5, 2, 18, 22, 10, 745, DateTimeKind.Unspecified).AddTicks(3666), new TimeSpan(0, 3, 0, 0, 0)),
                            Title = "Drink Water",
                            UnitId = 5,
                            VisibilityId = 1
                        },
                        new
                        {
                            Id = 3,
                            ChallengeTypeId = 1,
                            Color = "#FEFA95",
                            CountOfUnits = 15,
                            CreatedById = "81a2a998-6922-4cd9-ba36-b449a34a766a",
                            Description = "",
                            EndDate = new DateTimeOffset(new DateTime(2023, 5, 23, 18, 22, 10, 745, DateTimeKind.Unspecified).AddTicks(3718), new TimeSpan(0, 3, 0, 0, 0)),
                            Frequency = "1101100",
                            IconName = "mdiRunFast",
                            IsCompleted = false,
                            StartDate = new DateTimeOffset(new DateTime(2023, 5, 2, 18, 22, 10, 745, DateTimeKind.Unspecified).AddTicks(3713), new TimeSpan(0, 3, 0, 0, 0)),
                            Title = "Run",
                            UnitId = 2,
                            VisibilityId = 1
                        },
                        new
                        {
                            Id = 4,
                            ChallengeTypeId = 1,
                            Color = "#FEFA95",
                            CountOfUnits = 15,
                            CreatedById = "8526c845-e7be-4844-adbd-d512656409cc",
                            Description = "",
                            EndDate = new DateTimeOffset(new DateTime(2023, 5, 23, 18, 22, 10, 745, DateTimeKind.Unspecified).AddTicks(3732), new TimeSpan(0, 3, 0, 0, 0)),
                            Frequency = "1101100",
                            IconName = "mdiRunFast",
                            IsCompleted = false,
                            StartDate = new DateTimeOffset(new DateTime(2023, 5, 2, 18, 22, 10, 745, DateTimeKind.Unspecified).AddTicks(3726), new TimeSpan(0, 3, 0, 0, 0)),
                            Title = "Run",
                            UnitId = 2,
                            VisibilityId = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.ChallengeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChallengeTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Build a habit"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Quit a habit"
                        });
                });

            modelBuilder.Entity("Core.Entities.DailyTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("AssignedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<int>("CountOfUnitsDone")
                        .HasColumnType("int");

                    b.Property<bool>("IsDone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("SubtaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("SubtaskId");

                    b.ToTable("DailyTasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 2,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 3,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 4,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 5,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 6,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 7,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 8,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 9,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 10,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 11,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 12,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 13,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 14,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 15,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 16,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 1,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 17,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 18,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 19,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 20,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 21,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 22,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 23,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 24,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 25,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 26,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 27,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 28,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 29,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 30,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 31,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 32,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 2,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 33,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 34,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 35,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 36,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 37,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 38,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 39,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 40,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 41,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 42,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 43,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 44,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 3,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 45,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 46,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 47,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 48,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 49,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 50,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 51,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 52,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 53,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 54,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 55,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        },
                        new
                        {
                            Id = 56,
                            AssignedDate = new DateTimeOffset(new DateTime(2023, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            ChallengeId = 4,
                            CountOfUnitsDone = 0,
                            IsDone = false
                        });
                });

            modelBuilder.Entity("Core.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Core.Entities.Subtask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<int>("CountOfUnits")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("UnitId");

                    b.ToTable("Subtasks");
                });

            modelBuilder.Entity("Core.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ShortType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ShortType = "times",
                            Type = "times"
                        },
                        new
                        {
                            Id = 2,
                            ShortType = "min",
                            Type = "minutes"
                        },
                        new
                        {
                            Id = 3,
                            ShortType = "m",
                            Type = "meters"
                        },
                        new
                        {
                            Id = 4,
                            ShortType = "km",
                            Type = "kilometers"
                        },
                        new
                        {
                            Id = 5,
                            ShortType = "ml",
                            Type = "milliliters"
                        },
                        new
                        {
                            Id = 6,
                            ShortType = "pages",
                            Type = "pages"
                        });
                });

            modelBuilder.Entity("Core.Entities.Visibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Visibilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Only me"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Friends"
                        },
                        new
                        {
                            Id = 3,
                            Type = "All users"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "8526c845-e7be-4844-adbd-d512656409cc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9ec33dd-5e80-4ccf-8e19-f187eb63444b",
                            Email = "anna.korolchuk@oa.edu.ua",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNA.KOROLCHUK@OA.EDU.UA",
                            NormalizedUserName = "ANNA.KOROLCHUK@OA.EDU.UA",
                            PasswordHash = "AQAAAAEAACcQAAAAEFudCFAoB+hlNmb/NyptFmxfgm3Zl8vm+5LNj5Vx0B3oxfWR6+dFYAezZMN6dt448g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "21ce0b7e-a765-4dc3-b1ad-7cc522490426",
                            TwoFactorEnabled = false,
                            UserName = "a_korolchuk",
                            Points = 0
                        },
                        new
                        {
                            Id = "81a2a998-6922-4cd9-ba36-b449a34a766a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38bccebb-9a16-4253-8a26-8ab7b6988c0a",
                            Email = "antonina.loboda@oa.edu.ua",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANTONINA.LOBODA@OA.EDU.UA",
                            NormalizedUserName = "ANTONINA.LOBODA@OA.EDU.UA",
                            PasswordHash = "AQAAAAEAACcQAAAAEBGqLKbJw2OMQC09TB10aXTCvTLHCM3xuCPa5DcImqenZ84FtTFWqwF4jKtHMtzApQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ea001771-eeff-4418-911a-911fcd128f83",
                            TwoFactorEnabled = false,
                            UserName = "ton4ik",
                            Points = 0
                        },
                        new
                        {
                            Id = "0f62a9d4-941b-467f-b7e6-f73b09776829",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "35a24b9f-7ce9-4b2b-b249-038dcb733f7d",
                            Email = "Hazel.Windler@yahoo.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HAZEL.WINDLER@YAHOO.COM",
                            NormalizedUserName = "HAZEL.WINDLER54",
                            PasswordHash = "AQAAAAEAACcQAAAAEGhm4/v2BKI/HZYTNtpnNTRkbu2MxWRc62KQhpFqyUclM2U5yspYzsxs87Uza9eSUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d1c24a2-1ae0-4347-9d85-0b2bf24d3532",
                            TwoFactorEnabled = false,
                            UserName = "Hazel.Windler54",
                            Points = 0
                        },
                        new
                        {
                            Id = "ae7798fc-28c0-42fe-ac62-522f5ba98346",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f52150be-e837-469c-a6fc-dd67d97ffd7a",
                            Email = "Evelyn74@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EVELYN74@GMAIL.COM",
                            NormalizedUserName = "EVELYN19",
                            PasswordHash = "AQAAAAEAACcQAAAAEOddig0JblU++PbYBZcPiuM3vcqKSToQEGfpfF3+r4sqSWUhfdlda04jqYW0px+T4A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "54bdb774-6147-49ea-a12c-5dd30e7bdbc1",
                            TwoFactorEnabled = false,
                            UserName = "Evelyn19",
                            Points = 0
                        },
                        new
                        {
                            Id = "8e0b9c60-db77-4f6f-a533-0c06862c6885",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3c2f021-4882-4c82-9520-86bd78a6d3b4",
                            Email = "Isaac_Quitzon46@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ISAAC_QUITZON46@GMAIL.COM",
                            NormalizedUserName = "ISAAC.QUITZON38",
                            PasswordHash = "AQAAAAEAACcQAAAAEAfBWOkDCPgEmhIE5031CnvilxzwAHu5+cRbrk7JV7H3mhhgoQ5bOOIOi0yN36TEkQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aec308e3-9118-43d6-9c27-3bd216e6e22f",
                            TwoFactorEnabled = false,
                            UserName = "Isaac.Quitzon38",
                            Points = 0
                        },
                        new
                        {
                            Id = "ee531384-2905-423d-b65b-8c913f89333a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b9efb0d-23d3-4707-809c-011cf56ffd1a",
                            Email = "Trevor.Bashirian25@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TREVOR.BASHIRIAN25@GMAIL.COM",
                            NormalizedUserName = "TREVOR30",
                            PasswordHash = "AQAAAAEAACcQAAAAELPE1PkjK68LUhCB+o/srDEcqunFFKAltG90MSqmB9v2Htj+dmk6LRIvpJlf3Wf1sA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f542193e-a320-4c41-b2e6-ba7620e7b73e",
                            TwoFactorEnabled = false,
                            UserName = "Trevor30",
                            Points = 0
                        });
                });

            modelBuilder.Entity("ChallengeUser", b =>
                {
                    b.HasOne("Core.Entities.Challenge", null)
                        .WithMany()
                        .HasForeignKey("ChallengesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Challenge", b =>
                {
                    b.HasOne("Core.Entities.ChallengeType", "ChallengeType")
                        .WithMany("Challenges")
                        .HasForeignKey("ChallengeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "CreatedBy")
                        .WithMany("AuthoredChallenges")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Unit", "Unit")
                        .WithMany("Challenges")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Visibility", "Visibility")
                        .WithMany("Challenges")
                        .HasForeignKey("VisibilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChallengeType");

                    b.Navigation("CreatedBy");

                    b.Navigation("Unit");

                    b.Navigation("Visibility");
                });

            modelBuilder.Entity("Core.Entities.DailyTask", b =>
                {
                    b.HasOne("Core.Entities.Challenge", "Challenge")
                        .WithMany("DailyTasks")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Subtask", "Subtask")
                        .WithMany("DailyTasks")
                        .HasForeignKey("SubtaskId");

                    b.Navigation("Challenge");

                    b.Navigation("Subtask");
                });

            modelBuilder.Entity("Core.Entities.RefreshToken", b =>
                {
                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Subtask", b =>
                {
                    b.HasOne("Core.Entities.Challenge", "Challenge")
                        .WithMany("Subtasks")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Unit", "Unit")
                        .WithMany("Subtasks")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Challenge", b =>
                {
                    b.Navigation("DailyTasks");

                    b.Navigation("Subtasks");
                });

            modelBuilder.Entity("Core.Entities.ChallengeType", b =>
                {
                    b.Navigation("Challenges");
                });

            modelBuilder.Entity("Core.Entities.Subtask", b =>
                {
                    b.Navigation("DailyTasks");
                });

            modelBuilder.Entity("Core.Entities.Unit", b =>
                {
                    b.Navigation("Challenges");

                    b.Navigation("Subtasks");
                });

            modelBuilder.Entity("Core.Entities.Visibility", b =>
                {
                    b.Navigation("Challenges");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Navigation("AuthoredChallenges");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
